/**
 * 数据中心服务
 * 提供表单管理、表单记录增删改查等服务。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@goodvoice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * @type Aggregation
 * @export
 */
export declare type Aggregation = AvgAggregation | CountAggregation | DateHistogramAggregation | HistogramAggregation | MaxAggregation | MinAggregation | SumAggregation | TermAggregation;
/**
 *
 * @export
 * @interface AggregationQuery
 */
export interface AggregationQuery {
    /**
     *
     * @type {Aggregation}
     * @memberof AggregationQuery
     */
    aggs?: Aggregation;
    /**
     *
     * @type {Array<Query>}
     * @memberof AggregationQuery
     */
    filter?: Array<Query>;
}
/**
 *
 * @export
 * @interface AvgAggregation
 */
export interface AvgAggregation {
    /**
     *
     * @type {string}
     * @memberof AvgAggregation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AvgAggregation
     */
    opt?: AvgAggregationOptEnum;
    /**
     *
     * @type {string}
     * @memberof AvgAggregation
     */
    field?: string;
    /**
     *
     * @type {Aggregation}
     * @memberof AvgAggregation
     */
    subAgg?: Aggregation;
}
/**
    * @export
    * @enum {string}
    */
export declare enum AvgAggregationOptEnum {
    Avg = "AVG",
    Sum = "SUM",
    Count = "COUNT",
    Max = "MAX",
    Min = "MIN",
    Term = "TERM",
    Histogram = "HISTOGRAM",
    DateHistogram = "DATE_HISTOGRAM"
}
/**
 *
 * @export
 * @interface BetweenQuery
 */
export interface BetweenQuery {
    /**
     *
     * @type {string}
     * @memberof BetweenQuery
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof BetweenQuery
     */
    opt?: BetweenQueryOptEnum;
    /**
     *
     * @type {Rangeable}
     * @memberof BetweenQuery
     */
    value?: Rangeable;
}
/**
    * @export
    * @enum {string}
    */
export declare enum BetweenQueryOptEnum {
    Equal = "EQUAL",
    Match = "MATCH",
    In = "IN",
    Between = "BETWEEN"
}
/**
 *
 * @export
 * @interface CountAggregation
 */
export interface CountAggregation {
    /**
     *
     * @type {string}
     * @memberof CountAggregation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CountAggregation
     */
    opt?: CountAggregationOptEnum;
    /**
     *
     * @type {string}
     * @memberof CountAggregation
     */
    field?: string;
    /**
     *
     * @type {Aggregation}
     * @memberof CountAggregation
     */
    subAgg?: Aggregation;
}
/**
    * @export
    * @enum {string}
    */
export declare enum CountAggregationOptEnum {
    Avg = "AVG",
    Sum = "SUM",
    Count = "COUNT",
    Max = "MAX",
    Min = "MIN",
    Term = "TERM",
    Histogram = "HISTOGRAM",
    DateHistogram = "DATE_HISTOGRAM"
}
/**
 *
 * @export
 * @interface DateHistogramAggregation
 */
export interface DateHistogramAggregation {
    /**
     *
     * @type {string}
     * @memberof DateHistogramAggregation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DateHistogramAggregation
     */
    opt?: DateHistogramAggregationOptEnum;
    /**
     *
     * @type {string}
     * @memberof DateHistogramAggregation
     */
    field?: string;
    /**
     *
     * @type {Aggregation}
     * @memberof DateHistogramAggregation
     */
    subAgg?: Aggregation;
    /**
     *
     * @type {number}
     * @memberof DateHistogramAggregation
     */
    interval?: number;
    /**
     *
     * @type {string}
     * @memberof DateHistogramAggregation
     */
    unit?: DateHistogramAggregationUnitEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum DateHistogramAggregationOptEnum {
    Avg = "AVG",
    Sum = "SUM",
    Count = "COUNT",
    Max = "MAX",
    Min = "MIN",
    Term = "TERM",
    Histogram = "HISTOGRAM",
    DateHistogram = "DATE_HISTOGRAM"
}
/**
    * @export
    * @enum {string}
    */
export declare enum DateHistogramAggregationUnitEnum {
    Second = "SECOND",
    Minute = "MINUTE",
    Hour = "HOUR",
    Day = "DAY",
    Week = "WEEK",
    Month = "MONTH",
    Quarter = "QUARTER",
    Year = "YEAR"
}
/**
 *
 * @export
 * @interface EqualQuery
 */
export interface EqualQuery {
    /**
     *
     * @type {string}
     * @memberof EqualQuery
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof EqualQuery
     */
    opt?: EqualQueryOptEnum;
    /**
     *
     * @type {object}
     * @memberof EqualQuery
     */
    value?: object;
}
/**
    * @export
    * @enum {string}
    */
export declare enum EqualQueryOptEnum {
    Equal = "EQUAL",
    Match = "MATCH",
    In = "IN",
    Between = "BETWEEN"
}
/**
 *
 * @export
 * @interface Form
 */
export interface Form {
    /**
     *
     * @type {string}
     * @memberof Form
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof Form
     */
    version?: number;
    /**
     *
     * @type {string}
     * @memberof Form
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Form
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof Form
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof Form
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Form
     */
    primaryKey?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof Form
     */
    schema?: {
        [key: string]: object;
    };
    /**
     *
     * @type {string}
     * @memberof Form
     */
    additional?: string;
}
/**
 *
 * @export
 * @interface HistogramAggregation
 */
export interface HistogramAggregation {
    /**
     *
     * @type {string}
     * @memberof HistogramAggregation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof HistogramAggregation
     */
    opt?: HistogramAggregationOptEnum;
    /**
     *
     * @type {string}
     * @memberof HistogramAggregation
     */
    field?: string;
    /**
     *
     * @type {Aggregation}
     * @memberof HistogramAggregation
     */
    subAgg?: Aggregation;
    /**
     *
     * @type {number}
     * @memberof HistogramAggregation
     */
    interval?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum HistogramAggregationOptEnum {
    Avg = "AVG",
    Sum = "SUM",
    Count = "COUNT",
    Max = "MAX",
    Min = "MIN",
    Term = "TERM",
    Histogram = "HISTOGRAM",
    DateHistogram = "DATE_HISTOGRAM"
}
/**
 *
 * @export
 * @interface InQuery
 */
export interface InQuery {
    /**
     *
     * @type {string}
     * @memberof InQuery
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof InQuery
     */
    opt?: InQueryOptEnum;
    /**
     *
     * @type {Array<object>}
     * @memberof InQuery
     */
    value?: Array<object>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum InQueryOptEnum {
    Equal = "EQUAL",
    Match = "MATCH",
    In = "IN",
    Between = "BETWEEN"
}
/**
 *
 * @export
 * @interface MatchQuery
 */
export interface MatchQuery {
    /**
     *
     * @type {string}
     * @memberof MatchQuery
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof MatchQuery
     */
    opt?: MatchQueryOptEnum;
    /**
     *
     * @type {string}
     * @memberof MatchQuery
     */
    value?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum MatchQueryOptEnum {
    Equal = "EQUAL",
    Match = "MATCH",
    In = "IN",
    Between = "BETWEEN"
}
/**
 *
 * @export
 * @interface MaxAggregation
 */
export interface MaxAggregation {
    /**
     *
     * @type {string}
     * @memberof MaxAggregation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof MaxAggregation
     */
    opt?: MaxAggregationOptEnum;
    /**
     *
     * @type {string}
     * @memberof MaxAggregation
     */
    field?: string;
    /**
     *
     * @type {Aggregation}
     * @memberof MaxAggregation
     */
    subAgg?: Aggregation;
}
/**
    * @export
    * @enum {string}
    */
export declare enum MaxAggregationOptEnum {
    Avg = "AVG",
    Sum = "SUM",
    Count = "COUNT",
    Max = "MAX",
    Min = "MIN",
    Term = "TERM",
    Histogram = "HISTOGRAM",
    DateHistogram = "DATE_HISTOGRAM"
}
/**
 *
 * @export
 * @interface MinAggregation
 */
export interface MinAggregation {
    /**
     *
     * @type {string}
     * @memberof MinAggregation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof MinAggregation
     */
    opt?: MinAggregationOptEnum;
    /**
     *
     * @type {string}
     * @memberof MinAggregation
     */
    field?: string;
    /**
     *
     * @type {Aggregation}
     * @memberof MinAggregation
     */
    subAgg?: Aggregation;
}
/**
    * @export
    * @enum {string}
    */
export declare enum MinAggregationOptEnum {
    Avg = "AVG",
    Sum = "SUM",
    Count = "COUNT",
    Max = "MAX",
    Min = "MIN",
    Term = "TERM",
    Histogram = "HISTOGRAM",
    DateHistogram = "DATE_HISTOGRAM"
}
/**
 * @type Query
 * @export
 */
export declare type Query = BetweenQuery | EqualQuery | InQuery | MatchQuery;
/**
 * @type QueryObject
 * @export
 */
export declare type QueryObject = BetweenQuery | EqualQuery | InQuery | MatchQuery;
/**
 *
 * @export
 * @interface QueryResultForm
 */
export interface QueryResultForm {
    /**
     *
     * @type {number}
     * @memberof QueryResultForm
     */
    count?: number;
    /**
     *
     * @type {Array<Form>}
     * @memberof QueryResultForm
     */
    data?: Array<Form>;
}
/**
 *
 * @export
 * @interface QueryResultRecord
 */
export interface QueryResultRecord {
    /**
     *
     * @type {number}
     * @memberof QueryResultRecord
     */
    count?: number;
    /**
     *
     * @type {Array<Record>}
     * @memberof QueryResultRecord
     */
    data?: Array<Record>;
}
/**
 *
 * @export
 * @interface Rangeable
 */
export interface Rangeable {
    /**
     *
     * @type {object}
     * @memberof Rangeable
     */
    min?: object;
    /**
     *
     * @type {object}
     * @memberof Rangeable
     */
    max?: object;
    /**
     *
     * @type {boolean}
     * @memberof Rangeable
     */
    openInterval?: boolean;
}
/**
 *
 * @export
 * @interface Record
 */
export interface Record {
    /**
     *
     * @type {string}
     * @memberof Record
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Record
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof Record
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof Record
     */
    formId?: string;
    /**
     *
     * @type {string}
     * @memberof Record
     */
    formName?: string;
    /**
     *
     * @type {number}
     * @memberof Record
     */
    formVersion?: number;
    /**
     *
     * @type {string}
     * @memberof Record
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Record
     */
    updatedAt?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof Record
     */
    data?: {
        [key: string]: object;
    };
}
/**
 *
 * @export
 * @interface SumAggregation
 */
export interface SumAggregation {
    /**
     *
     * @type {string}
     * @memberof SumAggregation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SumAggregation
     */
    opt?: SumAggregationOptEnum;
    /**
     *
     * @type {string}
     * @memberof SumAggregation
     */
    field?: string;
    /**
     *
     * @type {Aggregation}
     * @memberof SumAggregation
     */
    subAgg?: Aggregation;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SumAggregationOptEnum {
    Avg = "AVG",
    Sum = "SUM",
    Count = "COUNT",
    Max = "MAX",
    Min = "MIN",
    Term = "TERM",
    Histogram = "HISTOGRAM",
    DateHistogram = "DATE_HISTOGRAM"
}
/**
 *
 * @export
 * @interface TermAggregation
 */
export interface TermAggregation {
    /**
     *
     * @type {string}
     * @memberof TermAggregation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TermAggregation
     */
    opt?: TermAggregationOptEnum;
    /**
     *
     * @type {string}
     * @memberof TermAggregation
     */
    field?: string;
    /**
     *
     * @type {Aggregation}
     * @memberof TermAggregation
     */
    subAgg?: Aggregation;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TermAggregationOptEnum {
    Avg = "AVG",
    Sum = "SUM",
    Count = "COUNT",
    Max = "MAX",
    Min = "MIN",
    Term = "TERM",
    Histogram = "HISTOGRAM",
    DateHistogram = "DATE_HISTOGRAM"
}
/**
 * FormsApi - axios parameter creator
 * @export
 */
export declare const FormsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 创建一个表单，返回创建后的表单。
     * @summary 创建表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createForm: (form: Form, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 通过名称删除所有表单。
     * @summary 删除表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteForm: (name: string, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 通过 ID 获取表单结构。
     * @summary 获取表单
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFormById: (id: string, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 当 query 不为空时，不分版本搜索表单，提供 name 可以限制搜索范围。当 query 为空时，若 name 不为空则列出该名称表单的所有版本，否则列出此应用的所有最新表单结构。
     * @summary 查询或列出表单
     * @param {string} [name]
     * @param {string} [query]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getForms: (name?: string, query?: string, page?: number, size?: number, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 通过名称获取最新版本的表单。
     * @summary 获取最新的表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestForm: (name: string, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 通过名称更新表单结构。
     * @summary 更新表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateForm: (form: Form, cid?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * FormsApi - functional programming interface
 * @export
 */
export declare const FormsApiFp: (configuration?: Configuration) => {
    /**
     * 创建一个表单，返回创建后的表单。
     * @summary 创建表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createForm(form: Form, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>>;
    /**
     * 通过名称删除所有表单。
     * @summary 删除表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteForm(name: string, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 通过 ID 获取表单结构。
     * @summary 获取表单
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFormById(id: string, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>>;
    /**
     * 当 query 不为空时，不分版本搜索表单，提供 name 可以限制搜索范围。当 query 为空时，若 name 不为空则列出该名称表单的所有版本，否则列出此应用的所有最新表单结构。
     * @summary 查询或列出表单
     * @param {string} [name]
     * @param {string} [query]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getForms(name?: string, query?: string, page?: number, size?: number, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultForm>>;
    /**
     * 通过名称获取最新版本的表单。
     * @summary 获取最新的表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestForm(name: string, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>>;
    /**
     * 通过名称更新表单结构。
     * @summary 更新表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateForm(form: Form, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>>;
};
/**
 * FormsApi - factory interface
 * @export
 */
export declare const FormsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 创建一个表单，返回创建后的表单。
     * @summary 创建表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createForm(form: Form, cid?: string, options?: any): AxiosPromise<Form>;
    /**
     * 通过名称删除所有表单。
     * @summary 删除表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteForm(name: string, cid?: string, options?: any): AxiosPromise<void>;
    /**
     * 通过 ID 获取表单结构。
     * @summary 获取表单
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFormById(id: string, cid?: string, options?: any): AxiosPromise<Form>;
    /**
     * 当 query 不为空时，不分版本搜索表单，提供 name 可以限制搜索范围。当 query 为空时，若 name 不为空则列出该名称表单的所有版本，否则列出此应用的所有最新表单结构。
     * @summary 查询或列出表单
     * @param {string} [name]
     * @param {string} [query]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getForms(name?: string, query?: string, page?: number, size?: number, cid?: string, options?: any): AxiosPromise<QueryResultForm>;
    /**
     * 通过名称获取最新版本的表单。
     * @summary 获取最新的表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestForm(name: string, cid?: string, options?: any): AxiosPromise<Form>;
    /**
     * 通过名称更新表单结构。
     * @summary 更新表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateForm(form: Form, cid?: string, options?: any): AxiosPromise<Form>;
};
/**
 * FormsApi - object-oriented interface
 * @export
 * @class FormsApi
 * @extends {BaseAPI}
 */
export declare class FormsApi extends BaseAPI {
    /**
     * 创建一个表单，返回创建后的表单。
     * @summary 创建表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    createForm(form: Form, cid?: string, options?: any): Promise<import("axios").AxiosResponse<Form>>;
    /**
     * 通过名称删除所有表单。
     * @summary 删除表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    deleteForm(name: string, cid?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 通过 ID 获取表单结构。
     * @summary 获取表单
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    getFormById(id: string, cid?: string, options?: any): Promise<import("axios").AxiosResponse<Form>>;
    /**
     * 当 query 不为空时，不分版本搜索表单，提供 name 可以限制搜索范围。当 query 为空时，若 name 不为空则列出该名称表单的所有版本，否则列出此应用的所有最新表单结构。
     * @summary 查询或列出表单
     * @param {string} [name]
     * @param {string} [query]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    getForms(name?: string, query?: string, page?: number, size?: number, cid?: string, options?: any): Promise<import("axios").AxiosResponse<QueryResultForm>>;
    /**
     * 通过名称获取最新版本的表单。
     * @summary 获取最新的表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    getLatestForm(name: string, cid?: string, options?: any): Promise<import("axios").AxiosResponse<Form>>;
    /**
     * 通过名称更新表单结构。
     * @summary 更新表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    updateForm(form: Form, cid?: string, options?: any): Promise<import("axios").AxiosResponse<Form>>;
}
/**
 * RecordsApi - axios parameter creator
 * @export
 */
export declare const RecordsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 聚合查询表单记录。
     * @summary 聚合表单记录
     * @param {string} name 表单名称。
     * @param {AggregationQuery} aggregationQuery
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregate: (name: string, aggregationQuery: AggregationQuery, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 提交一条表单记录。
     * @summary 创建表单记录
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRecord: (record: Record, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 删除一条表单记录。
     * @summary 删除表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecord: (id: string, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 根据 id 批量删除表单记录。
     * @summary 批量删除表单记录
     * @param {Array<string>} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecords: (requestBody: Array<string>, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 列出或搜索表单记录。
     * @summary 检索表单记录
     * @param {string} name 表单名称。
     * @param {string} [query] 关键词，对表单的 STRING 类型进行全文搜索。
     * @param {Array<string>} [orders] 排序字段，如：update （正序排序） -update（倒序排序）。
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {Array<QueryObject>} [queryObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRecords: (name: string, query?: string, orders?: Array<string>, page?: number, size?: number, cid?: string, queryObject?: Array<QueryObject>, options?: any) => Promise<RequestArgs>;
    /**
     * 获取一条表单记录。
     * @summary 获取表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecord: (id: string, cid?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 更新一条表单记录。
     * @summary 更新表单记录
     * @param {string} id
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRecord: (id: string, record: Record, cid?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * RecordsApi - functional programming interface
 * @export
 */
export declare const RecordsApiFp: (configuration?: Configuration) => {
    /**
     * 聚合查询表单记录。
     * @summary 聚合表单记录
     * @param {string} name 表单名称。
     * @param {AggregationQuery} aggregationQuery
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregate(name: string, aggregationQuery: AggregationQuery, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * 提交一条表单记录。
     * @summary 创建表单记录
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRecord(record: Record, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>>;
    /**
     * 删除一条表单记录。
     * @summary 删除表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecord(id: string, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 根据 id 批量删除表单记录。
     * @summary 批量删除表单记录
     * @param {Array<string>} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecords(requestBody: Array<string>, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 列出或搜索表单记录。
     * @summary 检索表单记录
     * @param {string} name 表单名称。
     * @param {string} [query] 关键词，对表单的 STRING 类型进行全文搜索。
     * @param {Array<string>} [orders] 排序字段，如：update （正序排序） -update（倒序排序）。
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {Array<QueryObject>} [queryObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRecords(name: string, query?: string, orders?: Array<string>, page?: number, size?: number, cid?: string, queryObject?: Array<QueryObject>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultRecord>>;
    /**
     * 获取一条表单记录。
     * @summary 获取表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecord(id: string, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>>;
    /**
     * 更新一条表单记录。
     * @summary 更新表单记录
     * @param {string} id
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRecord(id: string, record: Record, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * RecordsApi - factory interface
 * @export
 */
export declare const RecordsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 聚合查询表单记录。
     * @summary 聚合表单记录
     * @param {string} name 表单名称。
     * @param {AggregationQuery} aggregationQuery
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregate(name: string, aggregationQuery: AggregationQuery, cid?: string, options?: any): AxiosPromise<object>;
    /**
     * 提交一条表单记录。
     * @summary 创建表单记录
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRecord(record: Record, cid?: string, options?: any): AxiosPromise<Record>;
    /**
     * 删除一条表单记录。
     * @summary 删除表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecord(id: string, cid?: string, options?: any): AxiosPromise<void>;
    /**
     * 根据 id 批量删除表单记录。
     * @summary 批量删除表单记录
     * @param {Array<string>} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecords(requestBody: Array<string>, cid?: string, options?: any): AxiosPromise<void>;
    /**
     * 列出或搜索表单记录。
     * @summary 检索表单记录
     * @param {string} name 表单名称。
     * @param {string} [query] 关键词，对表单的 STRING 类型进行全文搜索。
     * @param {Array<string>} [orders] 排序字段，如：update （正序排序） -update（倒序排序）。
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {Array<QueryObject>} [queryObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRecords(name: string, query?: string, orders?: Array<string>, page?: number, size?: number, cid?: string, queryObject?: Array<QueryObject>, options?: any): AxiosPromise<QueryResultRecord>;
    /**
     * 获取一条表单记录。
     * @summary 获取表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecord(id: string, cid?: string, options?: any): AxiosPromise<Record>;
    /**
     * 更新一条表单记录。
     * @summary 更新表单记录
     * @param {string} id
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRecord(id: string, record: Record, cid?: string, options?: any): AxiosPromise<void>;
};
/**
 * RecordsApi - object-oriented interface
 * @export
 * @class RecordsApi
 * @extends {BaseAPI}
 */
export declare class RecordsApi extends BaseAPI {
    /**
     * 聚合查询表单记录。
     * @summary 聚合表单记录
     * @param {string} name 表单名称。
     * @param {AggregationQuery} aggregationQuery
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    aggregate(name: string, aggregationQuery: AggregationQuery, cid?: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * 提交一条表单记录。
     * @summary 创建表单记录
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    createRecord(record: Record, cid?: string, options?: any): Promise<import("axios").AxiosResponse<Record>>;
    /**
     * 删除一条表单记录。
     * @summary 删除表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    deleteRecord(id: string, cid?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 根据 id 批量删除表单记录。
     * @summary 批量删除表单记录
     * @param {Array<string>} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    deleteRecords(requestBody: Array<string>, cid?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 列出或搜索表单记录。
     * @summary 检索表单记录
     * @param {string} name 表单名称。
     * @param {string} [query] 关键词，对表单的 STRING 类型进行全文搜索。
     * @param {Array<string>} [orders] 排序字段，如：update （正序排序） -update（倒序排序）。
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {Array<QueryObject>} [queryObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    findRecords(name: string, query?: string, orders?: Array<string>, page?: number, size?: number, cid?: string, queryObject?: Array<QueryObject>, options?: any): Promise<import("axios").AxiosResponse<QueryResultRecord>>;
    /**
     * 获取一条表单记录。
     * @summary 获取表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    getRecord(id: string, cid?: string, options?: any): Promise<import("axios").AxiosResponse<Record>>;
    /**
     * 更新一条表单记录。
     * @summary 更新表单记录
     * @param {string} id
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    updateRecord(id: string, record: Record, cid?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
