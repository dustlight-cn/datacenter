"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 数据中心服务
 * 提供表单管理、表单记录增删改查等服务。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@dustlight.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordsApi = exports.RecordsApiFactory = exports.RecordsApiFp = exports.RecordsApiAxiosParamCreator = exports.FormsApi = exports.FormsApiFactory = exports.FormsApiFp = exports.FormsApiAxiosParamCreator = exports.TermAggregationOptEnum = exports.SumAggregationOptEnum = exports.MinAggregationOptEnum = exports.MaxAggregationOptEnum = exports.MatchQueryOptEnum = exports.InQueryOptEnum = exports.HistogramAggregationOptEnum = exports.EqualQueryOptEnum = exports.DateHistogramAggregationUnitEnum = exports.DateHistogramAggregationOptEnum = exports.CountAggregationOptEnum = exports.BetweenQueryOptEnum = exports.AvgAggregationOptEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var AvgAggregationOptEnum;
(function (AvgAggregationOptEnum) {
    AvgAggregationOptEnum["Avg"] = "AVG";
    AvgAggregationOptEnum["Sum"] = "SUM";
    AvgAggregationOptEnum["Count"] = "COUNT";
    AvgAggregationOptEnum["Max"] = "MAX";
    AvgAggregationOptEnum["Min"] = "MIN";
    AvgAggregationOptEnum["Term"] = "TERM";
    AvgAggregationOptEnum["Histogram"] = "HISTOGRAM";
    AvgAggregationOptEnum["DateHistogram"] = "DATE_HISTOGRAM";
})(AvgAggregationOptEnum = exports.AvgAggregationOptEnum || (exports.AvgAggregationOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BetweenQueryOptEnum;
(function (BetweenQueryOptEnum) {
    BetweenQueryOptEnum["Equal"] = "EQUAL";
    BetweenQueryOptEnum["Match"] = "MATCH";
    BetweenQueryOptEnum["In"] = "IN";
    BetweenQueryOptEnum["Between"] = "BETWEEN";
})(BetweenQueryOptEnum = exports.BetweenQueryOptEnum || (exports.BetweenQueryOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CountAggregationOptEnum;
(function (CountAggregationOptEnum) {
    CountAggregationOptEnum["Avg"] = "AVG";
    CountAggregationOptEnum["Sum"] = "SUM";
    CountAggregationOptEnum["Count"] = "COUNT";
    CountAggregationOptEnum["Max"] = "MAX";
    CountAggregationOptEnum["Min"] = "MIN";
    CountAggregationOptEnum["Term"] = "TERM";
    CountAggregationOptEnum["Histogram"] = "HISTOGRAM";
    CountAggregationOptEnum["DateHistogram"] = "DATE_HISTOGRAM";
})(CountAggregationOptEnum = exports.CountAggregationOptEnum || (exports.CountAggregationOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DateHistogramAggregationOptEnum;
(function (DateHistogramAggregationOptEnum) {
    DateHistogramAggregationOptEnum["Avg"] = "AVG";
    DateHistogramAggregationOptEnum["Sum"] = "SUM";
    DateHistogramAggregationOptEnum["Count"] = "COUNT";
    DateHistogramAggregationOptEnum["Max"] = "MAX";
    DateHistogramAggregationOptEnum["Min"] = "MIN";
    DateHistogramAggregationOptEnum["Term"] = "TERM";
    DateHistogramAggregationOptEnum["Histogram"] = "HISTOGRAM";
    DateHistogramAggregationOptEnum["DateHistogram"] = "DATE_HISTOGRAM";
})(DateHistogramAggregationOptEnum = exports.DateHistogramAggregationOptEnum || (exports.DateHistogramAggregationOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DateHistogramAggregationUnitEnum;
(function (DateHistogramAggregationUnitEnum) {
    DateHistogramAggregationUnitEnum["Second"] = "SECOND";
    DateHistogramAggregationUnitEnum["Minute"] = "MINUTE";
    DateHistogramAggregationUnitEnum["Hour"] = "HOUR";
    DateHistogramAggregationUnitEnum["Day"] = "DAY";
    DateHistogramAggregationUnitEnum["Week"] = "WEEK";
    DateHistogramAggregationUnitEnum["Month"] = "MONTH";
    DateHistogramAggregationUnitEnum["Quarter"] = "QUARTER";
    DateHistogramAggregationUnitEnum["Year"] = "YEAR";
})(DateHistogramAggregationUnitEnum = exports.DateHistogramAggregationUnitEnum || (exports.DateHistogramAggregationUnitEnum = {}));
/**
    * @export
    * @enum {string}
    */
var EqualQueryOptEnum;
(function (EqualQueryOptEnum) {
    EqualQueryOptEnum["Equal"] = "EQUAL";
    EqualQueryOptEnum["Match"] = "MATCH";
    EqualQueryOptEnum["In"] = "IN";
    EqualQueryOptEnum["Between"] = "BETWEEN";
})(EqualQueryOptEnum = exports.EqualQueryOptEnum || (exports.EqualQueryOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var HistogramAggregationOptEnum;
(function (HistogramAggregationOptEnum) {
    HistogramAggregationOptEnum["Avg"] = "AVG";
    HistogramAggregationOptEnum["Sum"] = "SUM";
    HistogramAggregationOptEnum["Count"] = "COUNT";
    HistogramAggregationOptEnum["Max"] = "MAX";
    HistogramAggregationOptEnum["Min"] = "MIN";
    HistogramAggregationOptEnum["Term"] = "TERM";
    HistogramAggregationOptEnum["Histogram"] = "HISTOGRAM";
    HistogramAggregationOptEnum["DateHistogram"] = "DATE_HISTOGRAM";
})(HistogramAggregationOptEnum = exports.HistogramAggregationOptEnum || (exports.HistogramAggregationOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InQueryOptEnum;
(function (InQueryOptEnum) {
    InQueryOptEnum["Equal"] = "EQUAL";
    InQueryOptEnum["Match"] = "MATCH";
    InQueryOptEnum["In"] = "IN";
    InQueryOptEnum["Between"] = "BETWEEN";
})(InQueryOptEnum = exports.InQueryOptEnum || (exports.InQueryOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MatchQueryOptEnum;
(function (MatchQueryOptEnum) {
    MatchQueryOptEnum["Equal"] = "EQUAL";
    MatchQueryOptEnum["Match"] = "MATCH";
    MatchQueryOptEnum["In"] = "IN";
    MatchQueryOptEnum["Between"] = "BETWEEN";
})(MatchQueryOptEnum = exports.MatchQueryOptEnum || (exports.MatchQueryOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MaxAggregationOptEnum;
(function (MaxAggregationOptEnum) {
    MaxAggregationOptEnum["Avg"] = "AVG";
    MaxAggregationOptEnum["Sum"] = "SUM";
    MaxAggregationOptEnum["Count"] = "COUNT";
    MaxAggregationOptEnum["Max"] = "MAX";
    MaxAggregationOptEnum["Min"] = "MIN";
    MaxAggregationOptEnum["Term"] = "TERM";
    MaxAggregationOptEnum["Histogram"] = "HISTOGRAM";
    MaxAggregationOptEnum["DateHistogram"] = "DATE_HISTOGRAM";
})(MaxAggregationOptEnum = exports.MaxAggregationOptEnum || (exports.MaxAggregationOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MinAggregationOptEnum;
(function (MinAggregationOptEnum) {
    MinAggregationOptEnum["Avg"] = "AVG";
    MinAggregationOptEnum["Sum"] = "SUM";
    MinAggregationOptEnum["Count"] = "COUNT";
    MinAggregationOptEnum["Max"] = "MAX";
    MinAggregationOptEnum["Min"] = "MIN";
    MinAggregationOptEnum["Term"] = "TERM";
    MinAggregationOptEnum["Histogram"] = "HISTOGRAM";
    MinAggregationOptEnum["DateHistogram"] = "DATE_HISTOGRAM";
})(MinAggregationOptEnum = exports.MinAggregationOptEnum || (exports.MinAggregationOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SumAggregationOptEnum;
(function (SumAggregationOptEnum) {
    SumAggregationOptEnum["Avg"] = "AVG";
    SumAggregationOptEnum["Sum"] = "SUM";
    SumAggregationOptEnum["Count"] = "COUNT";
    SumAggregationOptEnum["Max"] = "MAX";
    SumAggregationOptEnum["Min"] = "MIN";
    SumAggregationOptEnum["Term"] = "TERM";
    SumAggregationOptEnum["Histogram"] = "HISTOGRAM";
    SumAggregationOptEnum["DateHistogram"] = "DATE_HISTOGRAM";
})(SumAggregationOptEnum = exports.SumAggregationOptEnum || (exports.SumAggregationOptEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TermAggregationOptEnum;
(function (TermAggregationOptEnum) {
    TermAggregationOptEnum["Avg"] = "AVG";
    TermAggregationOptEnum["Sum"] = "SUM";
    TermAggregationOptEnum["Count"] = "COUNT";
    TermAggregationOptEnum["Max"] = "MAX";
    TermAggregationOptEnum["Min"] = "MIN";
    TermAggregationOptEnum["Term"] = "TERM";
    TermAggregationOptEnum["Histogram"] = "HISTOGRAM";
    TermAggregationOptEnum["DateHistogram"] = "DATE_HISTOGRAM";
})(TermAggregationOptEnum = exports.TermAggregationOptEnum || (exports.TermAggregationOptEnum = {}));
/**
 * FormsApi - axios parameter creator
 * @export
 */
const FormsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 创建一个表单，返回创建后的表单。
         * @summary 创建表单
         * @param {Form} form
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForm: (form, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'form' is not null or undefined
            (0, common_1.assertParamExists)('createForm', 'form', form);
            const localVarPath = `/v1/form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(form, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 通过名称删除所有表单。
         * @summary 删除表单
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForm: (name, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('deleteForm', 'name', name);
            const localVarPath = `/v1/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 通过 ID 获取表单结构。
         * @summary 获取表单
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormById: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getFormById', 'id', id);
            const localVarPath = `/v1/form/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 当 query 不为空时，不分版本搜索表单，提供 name 可以限制搜索范围。当 query 为空时，若 name 不为空则列出该名称表单的所有版本，否则列出此应用的所有最新表单结构。
         * @summary 查询或列出表单
         * @param {string} [name]
         * @param {string} [query]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForms: (name, query, page, size, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 通过名称获取最新版本的表单。
         * @summary 获取最新的表单
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestForm: (name, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('getLatestForm', 'name', name);
            const localVarPath = `/v1/form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 通过名称更新表单结构。
         * @summary 更新表单
         * @param {Form} form
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForm: (form, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'form' is not null or undefined
            (0, common_1.assertParamExists)('updateForm', 'form', form);
            const localVarPath = `/v1/form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(form, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FormsApiAxiosParamCreator = FormsApiAxiosParamCreator;
/**
 * FormsApi - functional programming interface
 * @export
 */
const FormsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FormsApiAxiosParamCreator)(configuration);
    return {
        /**
         * 创建一个表单，返回创建后的表单。
         * @summary 创建表单
         * @param {Form} form
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForm(form, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createForm(form, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 通过名称删除所有表单。
         * @summary 删除表单
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForm(name, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteForm(name, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 通过 ID 获取表单结构。
         * @summary 获取表单
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormById(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFormById(id, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 当 query 不为空时，不分版本搜索表单，提供 name 可以限制搜索范围。当 query 为空时，若 name 不为空则列出该名称表单的所有版本，否则列出此应用的所有最新表单结构。
         * @summary 查询或列出表单
         * @param {string} [name]
         * @param {string} [query]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForms(name, query, page, size, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getForms(name, query, page, size, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 通过名称获取最新版本的表单。
         * @summary 获取最新的表单
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestForm(name, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getLatestForm(name, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 通过名称更新表单结构。
         * @summary 更新表单
         * @param {Form} form
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForm(form, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateForm(form, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.FormsApiFp = FormsApiFp;
/**
 * FormsApi - factory interface
 * @export
 */
const FormsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FormsApiFp)(configuration);
    return {
        /**
         * 创建一个表单，返回创建后的表单。
         * @summary 创建表单
         * @param {Form} form
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForm(form, cid, options) {
            return localVarFp.createForm(form, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 通过名称删除所有表单。
         * @summary 删除表单
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForm(name, cid, options) {
            return localVarFp.deleteForm(name, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 通过 ID 获取表单结构。
         * @summary 获取表单
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormById(id, cid, options) {
            return localVarFp.getFormById(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 当 query 不为空时，不分版本搜索表单，提供 name 可以限制搜索范围。当 query 为空时，若 name 不为空则列出该名称表单的所有版本，否则列出此应用的所有最新表单结构。
         * @summary 查询或列出表单
         * @param {string} [name]
         * @param {string} [query]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForms(name, query, page, size, cid, options) {
            return localVarFp.getForms(name, query, page, size, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 通过名称获取最新版本的表单。
         * @summary 获取最新的表单
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestForm(name, cid, options) {
            return localVarFp.getLatestForm(name, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 通过名称更新表单结构。
         * @summary 更新表单
         * @param {Form} form
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForm(form, cid, options) {
            return localVarFp.updateForm(form, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FormsApiFactory = FormsApiFactory;
/**
 * FormsApi - object-oriented interface
 * @export
 * @class FormsApi
 * @extends {BaseAPI}
 */
class FormsApi extends base_1.BaseAPI {
    /**
     * 创建一个表单，返回创建后的表单。
     * @summary 创建表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    createForm(form, cid, options) {
        return (0, exports.FormsApiFp)(this.configuration).createForm(form, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 通过名称删除所有表单。
     * @summary 删除表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    deleteForm(name, cid, options) {
        return (0, exports.FormsApiFp)(this.configuration).deleteForm(name, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 通过 ID 获取表单结构。
     * @summary 获取表单
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    getFormById(id, cid, options) {
        return (0, exports.FormsApiFp)(this.configuration).getFormById(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 当 query 不为空时，不分版本搜索表单，提供 name 可以限制搜索范围。当 query 为空时，若 name 不为空则列出该名称表单的所有版本，否则列出此应用的所有最新表单结构。
     * @summary 查询或列出表单
     * @param {string} [name]
     * @param {string} [query]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    getForms(name, query, page, size, cid, options) {
        return (0, exports.FormsApiFp)(this.configuration).getForms(name, query, page, size, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 通过名称获取最新版本的表单。
     * @summary 获取最新的表单
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    getLatestForm(name, cid, options) {
        return (0, exports.FormsApiFp)(this.configuration).getLatestForm(name, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 通过名称更新表单结构。
     * @summary 更新表单
     * @param {Form} form
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    updateForm(form, cid, options) {
        return (0, exports.FormsApiFp)(this.configuration).updateForm(form, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FormsApi = FormsApi;
/**
 * RecordsApi - axios parameter creator
 * @export
 */
const RecordsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 聚合查询表单记录。
         * @summary 聚合表单记录
         * @param {string} name 表单名称。
         * @param {AggregationQuery} aggregationQuery
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregate: (name, aggregationQuery, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('aggregate', 'name', name);
            // verify required parameter 'aggregationQuery' is not null or undefined
            (0, common_1.assertParamExists)('aggregate', 'aggregationQuery', aggregationQuery);
            const localVarPath = `/v1/records/aggregations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(aggregationQuery, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 提交一条表单记录。
         * @summary 创建表单记录
         * @param {Record} record
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord: (record, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'record' is not null or undefined
            (0, common_1.assertParamExists)('createRecord', 'record', record);
            const localVarPath = `/v1/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(record, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 删除一条表单记录。
         * @summary 删除表单记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteRecord', 'id', id);
            const localVarPath = `/v1/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 根据 id 批量删除表单记录。
         * @summary 批量删除表单记录
         * @param {Array<string>} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecords: (requestBody, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('deleteRecords', 'requestBody', requestBody);
            const localVarPath = `/v1/records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 列出或搜索表单记录。
         * @summary 检索表单记录
         * @param {string} name 表单名称。
         * @param {string} [query] 关键词，对表单的 STRING 类型进行全文搜索。
         * @param {Array<string>} [orders] 排序字段，如：update （正序排序） -update（倒序排序）。
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {Array<QueryObject>} [queryObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecords: (name, query, orders, page, size, cid, queryObject, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('findRecords', 'name', name);
            const localVarPath = `/v1/records/queries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (orders) {
                localVarQueryParameter['orders'] = orders;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryObject, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 获取一条表单记录。
         * @summary 获取表单记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getRecord', 'id', id);
            const localVarPath = `/v1/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 更新一条表单记录。
         * @summary 更新表单记录
         * @param {string} id
         * @param {Record} record
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord: (id, record, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateRecord', 'id', id);
            // verify required parameter 'record' is not null or undefined
            (0, common_1.assertParamExists)('updateRecord', 'record', record);
            const localVarPath = `/v1/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(record, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 验证一条表单记录。
         * @summary 验证表单记录
         * @param {Record} record
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify: (record, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'record' is not null or undefined
            (0, common_1.assertParamExists)('verify', 'record', record);
            const localVarPath = `/v1/validation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(record, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RecordsApiAxiosParamCreator = RecordsApiAxiosParamCreator;
/**
 * RecordsApi - functional programming interface
 * @export
 */
const RecordsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RecordsApiAxiosParamCreator)(configuration);
    return {
        /**
         * 聚合查询表单记录。
         * @summary 聚合表单记录
         * @param {string} name 表单名称。
         * @param {AggregationQuery} aggregationQuery
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregate(name, aggregationQuery, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.aggregate(name, aggregationQuery, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 提交一条表单记录。
         * @summary 创建表单记录
         * @param {Record} record
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord(record, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRecord(record, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 删除一条表单记录。
         * @summary 删除表单记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRecord(id, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 根据 id 批量删除表单记录。
         * @summary 批量删除表单记录
         * @param {Array<string>} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecords(requestBody, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRecords(requestBody, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 列出或搜索表单记录。
         * @summary 检索表单记录
         * @param {string} name 表单名称。
         * @param {string} [query] 关键词，对表单的 STRING 类型进行全文搜索。
         * @param {Array<string>} [orders] 排序字段，如：update （正序排序） -update（倒序排序）。
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {Array<QueryObject>} [queryObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecords(name, query, orders, page, size, cid, queryObject, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.findRecords(name, query, orders, page, size, cid, queryObject, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 获取一条表单记录。
         * @summary 获取表单记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRecord(id, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 更新一条表单记录。
         * @summary 更新表单记录
         * @param {string} id
         * @param {Record} record
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord(id, record, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateRecord(id, record, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 验证一条表单记录。
         * @summary 验证表单记录
         * @param {Record} record
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify(record, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.verify(record, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.RecordsApiFp = RecordsApiFp;
/**
 * RecordsApi - factory interface
 * @export
 */
const RecordsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RecordsApiFp)(configuration);
    return {
        /**
         * 聚合查询表单记录。
         * @summary 聚合表单记录
         * @param {string} name 表单名称。
         * @param {AggregationQuery} aggregationQuery
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregate(name, aggregationQuery, cid, options) {
            return localVarFp.aggregate(name, aggregationQuery, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 提交一条表单记录。
         * @summary 创建表单记录
         * @param {Record} record
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord(record, cid, options) {
            return localVarFp.createRecord(record, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除一条表单记录。
         * @summary 删除表单记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord(id, cid, options) {
            return localVarFp.deleteRecord(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据 id 批量删除表单记录。
         * @summary 批量删除表单记录
         * @param {Array<string>} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecords(requestBody, cid, options) {
            return localVarFp.deleteRecords(requestBody, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 列出或搜索表单记录。
         * @summary 检索表单记录
         * @param {string} name 表单名称。
         * @param {string} [query] 关键词，对表单的 STRING 类型进行全文搜索。
         * @param {Array<string>} [orders] 排序字段，如：update （正序排序） -update（倒序排序）。
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {Array<QueryObject>} [queryObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecords(name, query, orders, page, size, cid, queryObject, options) {
            return localVarFp.findRecords(name, query, orders, page, size, cid, queryObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取一条表单记录。
         * @summary 获取表单记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(id, cid, options) {
            return localVarFp.getRecord(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新一条表单记录。
         * @summary 更新表单记录
         * @param {string} id
         * @param {Record} record
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord(id, record, cid, options) {
            return localVarFp.updateRecord(id, record, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 验证一条表单记录。
         * @summary 验证表单记录
         * @param {Record} record
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify(record, cid, options) {
            return localVarFp.verify(record, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RecordsApiFactory = RecordsApiFactory;
/**
 * RecordsApi - object-oriented interface
 * @export
 * @class RecordsApi
 * @extends {BaseAPI}
 */
class RecordsApi extends base_1.BaseAPI {
    /**
     * 聚合查询表单记录。
     * @summary 聚合表单记录
     * @param {string} name 表单名称。
     * @param {AggregationQuery} aggregationQuery
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    aggregate(name, aggregationQuery, cid, options) {
        return (0, exports.RecordsApiFp)(this.configuration).aggregate(name, aggregationQuery, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 提交一条表单记录。
     * @summary 创建表单记录
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    createRecord(record, cid, options) {
        return (0, exports.RecordsApiFp)(this.configuration).createRecord(record, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 删除一条表单记录。
     * @summary 删除表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    deleteRecord(id, cid, options) {
        return (0, exports.RecordsApiFp)(this.configuration).deleteRecord(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 根据 id 批量删除表单记录。
     * @summary 批量删除表单记录
     * @param {Array<string>} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    deleteRecords(requestBody, cid, options) {
        return (0, exports.RecordsApiFp)(this.configuration).deleteRecords(requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 列出或搜索表单记录。
     * @summary 检索表单记录
     * @param {string} name 表单名称。
     * @param {string} [query] 关键词，对表单的 STRING 类型进行全文搜索。
     * @param {Array<string>} [orders] 排序字段，如：update （正序排序） -update（倒序排序）。
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {Array<QueryObject>} [queryObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    findRecords(name, query, orders, page, size, cid, queryObject, options) {
        return (0, exports.RecordsApiFp)(this.configuration).findRecords(name, query, orders, page, size, cid, queryObject, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 获取一条表单记录。
     * @summary 获取表单记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    getRecord(id, cid, options) {
        return (0, exports.RecordsApiFp)(this.configuration).getRecord(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 更新一条表单记录。
     * @summary 更新表单记录
     * @param {string} id
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    updateRecord(id, record, cid, options) {
        return (0, exports.RecordsApiFp)(this.configuration).updateRecord(id, record, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 验证一条表单记录。
     * @summary 验证表单记录
     * @param {Record} record
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    verify(record, cid, options) {
        return (0, exports.RecordsApiFp)(this.configuration).verify(record, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RecordsApi = RecordsApi;
