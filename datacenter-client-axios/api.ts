/* tslint:disable */
/* eslint-disable */
/**
 * 数据中心服务
 * 提供表单管理、表单记录增删改查等服务。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@goodvoice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BooleanItem
 */
export interface BooleanItem {
    /**
     * 
     * @type {string}
     * @memberof BooleanItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BooleanItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof BooleanItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BooleanItem
     */
    type?: BooleanItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof BooleanItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BooleanItem
     */
    required?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum BooleanItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT'
}

/**
 * 
 * @export
 * @interface DateItem
 */
export interface DateItem {
    /**
     * 
     * @type {string}
     * @memberof DateItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DateItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof DateItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DateItem
     */
    type?: DateItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DateItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DateItem
     */
    required?: boolean;
    /**
     * 
     * @type {RangeableInstant}
     * @memberof DateItem
     */
    dateRange?: RangeableInstant;
}

/**
    * @export
    * @enum {string}
    */
export enum DateItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT'
}

/**
 * 
 * @export
 * @interface DoubleItem
 */
export interface DoubleItem {
    /**
     * 
     * @type {string}
     * @memberof DoubleItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DoubleItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof DoubleItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DoubleItem
     */
    type?: DoubleItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DoubleItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DoubleItem
     */
    required?: boolean;
    /**
     * 
     * @type {RangeableDouble}
     * @memberof DoubleItem
     */
    doubleRange?: RangeableDouble;
}

/**
    * @export
    * @enum {string}
    */
export enum DoubleItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT'
}

/**
 * 
 * @export
 * @interface FileItem
 */
export interface FileItem {
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    type?: FileItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof FileItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FileItem
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    mime?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FileItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT'
}

/**
 * 
 * @export
 * @interface Form
 */
export interface Form {
    /**
     * 
     * @type {string}
     * @memberof Form
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof Form
     */
    version?: number;
    /**
     * 
     * @type {string}
     * @memberof Form
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Form
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof Form
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Form
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof Form
     */
    description?: string;
    /**
     * 
     * @type {Array<ItemGroup>}
     * @memberof Form
     */
    groups?: Array<ItemGroup>;
}
/**
 * 
 * @export
 * @interface FormItem
 */
export interface FormItem {
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    type?: FormItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof FormItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormItem
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    form?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FormItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT'
}

/**
 * 
 * @export
 * @interface FormRecord
 */
export interface FormRecord {
    /**
     * 
     * @type {string}
     * @memberof FormRecord
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRecord
     */
    formId?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRecord
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRecord
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRecord
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRecord
     */
    updatedAt?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof FormRecord
     */
    data?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface IntItem
 */
export interface IntItem {
    /**
     * 
     * @type {string}
     * @memberof IntItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IntItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof IntItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof IntItem
     */
    type?: IntItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof IntItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IntItem
     */
    required?: boolean;
    /**
     * 
     * @type {RangeableInteger}
     * @memberof IntItem
     */
    intRange?: RangeableInteger;
}

/**
    * @export
    * @enum {string}
    */
export enum IntItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT'
}

/**
 * @type Item
 * @export
 */
export type Item = BooleanItem | DateItem | DoubleItem | FileItem | FormItem | IntItem | SelectItem | StringItem;

/**
 * 
 * @export
 * @interface ItemGroup
 */
export interface ItemGroup {
    /**
     * 
     * @type {string}
     * @memberof ItemGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemGroup
     */
    description?: string;
    /**
     * 
     * @type {Array<Item>}
     * @memberof ItemGroup
     */
    items?: Array<Item>;
}
/**
 * 
 * @export
 * @interface RangeableDouble
 */
export interface RangeableDouble {
    /**
     * 
     * @type {number}
     * @memberof RangeableDouble
     */
    min?: number;
    /**
     * 
     * @type {number}
     * @memberof RangeableDouble
     */
    max?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RangeableDouble
     */
    openInterval?: boolean;
}
/**
 * 
 * @export
 * @interface RangeableInstant
 */
export interface RangeableInstant {
    /**
     * 
     * @type {string}
     * @memberof RangeableInstant
     */
    min?: string;
    /**
     * 
     * @type {string}
     * @memberof RangeableInstant
     */
    max?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RangeableInstant
     */
    openInterval?: boolean;
}
/**
 * 
 * @export
 * @interface RangeableInteger
 */
export interface RangeableInteger {
    /**
     * 
     * @type {number}
     * @memberof RangeableInteger
     */
    min?: number;
    /**
     * 
     * @type {number}
     * @memberof RangeableInteger
     */
    max?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RangeableInteger
     */
    openInterval?: boolean;
}
/**
 * 
 * @export
 * @interface SelectItem
 */
export interface SelectItem {
    /**
     * 
     * @type {string}
     * @memberof SelectItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectItem
     */
    type?: SelectItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof SelectItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SelectItem
     */
    required?: boolean;
    /**
     * 
     * @type {RangeableInteger}
     * @memberof SelectItem
     */
    selectedRange?: RangeableInteger;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof SelectItem
     */
    options?: { [key: string]: string; };
}

/**
    * @export
    * @enum {string}
    */
export enum SelectItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT'
}

/**
 * 
 * @export
 * @interface StringItem
 */
export interface StringItem {
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    type?: StringItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof StringItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StringItem
     */
    required?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StringItem
     */
    multiline?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StringItem
     */
    html?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    regex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum StringItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT'
}


/**
 * FormsApi - axios parameter creator
 * @export
 */
export const FormsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Form} form 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForm: async (form: Form, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('createForm', 'form', form)
            const localVarPath = `/v1/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForm: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteForm', 'name', name)
            const localVarPath = `/v1/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForm: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getForm', 'name', name)
            const localVarPath = `/v1/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFormById', 'id', id)
            const localVarPath = `/v1/forms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Form} form 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForm: async (form: Form, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('updateForm', 'form', form)
            const localVarPath = `/v1/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormsApi - functional programming interface
 * @export
 */
export const FormsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Form} form 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createForm(form: Form, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createForm(form, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteForm(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteForm(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForm(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForm(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Form} form 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateForm(form: Form, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateForm(form, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FormsApi - factory interface
 * @export
 */
export const FormsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormsApiFp(configuration)
    return {
        /**
         * 
         * @param {Form} form 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForm(form: Form, options?: any): AxiosPromise<Form> {
            return localVarFp.createForm(form, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForm(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteForm(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForm(name: string, options?: any): AxiosPromise<Form> {
            return localVarFp.getForm(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormById(id: string, options?: any): AxiosPromise<Form> {
            return localVarFp.getFormById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Form} form 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForm(form: Form, options?: any): AxiosPromise<Form> {
            return localVarFp.updateForm(form, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormsApi - object-oriented interface
 * @export
 * @class FormsApi
 * @extends {BaseAPI}
 */
export class FormsApi extends BaseAPI {
    /**
     * 
     * @param {Form} form 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public createForm(form: Form, options?: any) {
        return FormsApiFp(this.configuration).createForm(form, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public deleteForm(name: string, options?: any) {
        return FormsApiFp(this.configuration).deleteForm(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public getForm(name: string, options?: any) {
        return FormsApiFp(this.configuration).getForm(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public getFormById(id: string, options?: any) {
        return FormsApiFp(this.configuration).getFormById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Form} form 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public updateForm(form: Form, options?: any) {
        return FormsApiFp(this.configuration).updateForm(form, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecordsApi - axios parameter creator
 * @export
 */
export const RecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FormRecord} formRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord: async (formRecord: FormRecord, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formRecord' is not null or undefined
            assertParamExists('createRecord', 'formRecord', formRecord)
            const localVarPath = `/v1/records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formRecord, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordsApi - functional programming interface
 * @export
 */
export const RecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FormRecord} formRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecord(formRecord: FormRecord, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecord(formRecord, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecordsApi - factory interface
 * @export
 */
export const RecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecordsApiFp(configuration)
    return {
        /**
         * 
         * @param {FormRecord} formRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord(formRecord: FormRecord, options?: any): AxiosPromise<FormRecord> {
            return localVarFp.createRecord(formRecord, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecordsApi - object-oriented interface
 * @export
 * @class RecordsApi
 * @extends {BaseAPI}
 */
export class RecordsApi extends BaseAPI {
    /**
     * 
     * @param {FormRecord} formRecord 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordsApi
     */
    public createRecord(formRecord: FormRecord, options?: any) {
        return RecordsApiFp(this.configuration).createRecord(formRecord, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestControllerApi - axios parameter creator
 * @export
 */
export const TestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} q 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (q: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('search', 'q', q)
            const localVarPath = `/v1/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestControllerApi - functional programming interface
 * @export
 */
export const TestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} q 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(q: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestControllerApi - factory interface
 * @export
 */
export const TestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} q 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(q: string, options?: any): AxiosPromise<object> {
            return localVarFp.search(q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestControllerApi - object-oriented interface
 * @export
 * @class TestControllerApi
 * @extends {BaseAPI}
 */
export class TestControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} q 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestControllerApi
     */
    public search(q: string, options?: any) {
        return TestControllerApiFp(this.configuration).search(q, options).then((request) => request(this.axios, this.basePath));
    }
}


