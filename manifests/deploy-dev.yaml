# 创建命名空间 datacenter
apiVersion: v1
kind: Namespace
metadata:
  name: datacenter
---
# 创建镜像拉取密钥
kind: Secret
apiVersion: v1
metadata:
  name: aliyun-docker-secret
  namespace: datacenter
data:
  .dockerconfigjson: >-
    eyJhdXRocyI6eyJyZWdpc3RyeS5jbi1oYW5nemhvdS5hbGl5dW5jcy5jb20iOnsidXNlcm5hbWUiOiJoYW5zaW5AMTcwOTc4NDEzMDAwOTU4MCIsInBhc3N3b3JkIjoibGI4NDU2MTI1MDAiLCJhdXRoIjoiYUdGdWMybHVRREUzTURrM09EUXhNekF3TURrMU9EQTZiR0k0TkRVMk1USTFNREE9In19fQ==
type: kubernetes.io/dockerconfigjson
---
# 创建 datacenter-service 配置文件
apiVersion: v1
kind: ConfigMap
metadata:
  name: datacenter-service-config
  namespace: datacenter
data:
  application.yaml: |-
    # OAuth 配置
    plus:
      oauth2:
        client:
          client-id: 877ce1dd5030000
          client-secret: 1283d148237af330152929cfe05ec045b0a4e92d
          api-endpoint: http://auth-service.auth
          token-uri: http://auth-service.auth/v1/oauth/token
        resource-server:
          jwk-set-uri: http://auth-service.auth/v1/jwk
          client-secret: none
          client-id: none
          uri: http://auth-service.auth/v1/token/validity
          token-type: jwt
      datacenter:
        form:
          schema-additional:
            - key: $id
              value: ${plus.datacenter.schema.parameters.endpoint}/${plus.datacenter.schema.parameters.prefix}/
            - key: $schema
              value: ${plus.datacenter.schema.parameters.endpoint}/${plus.datacenter.schema.parameters.prefix}${plus.datacenter.schema.adapter.form-schema}
        authorization-endpoint: "https://accounts.wgv.ink/authorize"
        mongo:
          form-collection: form
          record-collection: form_record
        amqp:
          exchange: datacenter-test
          sync:
            enabled: true
            queue: datacenter-sync-test
            dead-letter-queue: datacenter-sync-dead-test
        schema:
          parameters:
            prefix: v1/schemas
            endpoint: https://api.json-schema.cloud
          mapping: ${plus.datacenter.schema.parameters.prefix}/**
          adapter:
            meta-schema: /schema
            form-schema: /form
            non-validation-keywords:
              - form
        elasticsearch:
          record-prefix: datacenter_test.form_record
          form-prefix: datacenter_test.form
    # SpringDoc 配置
    springdoc:
      api-docs:
        enabled: on
        path: /doc
      swagger-ui:
        path: /doc.html
        oauth:
          client-id: 86c3e34e2030000
          additional-query-string-params:
            jwt: true
    spring:
      data:
        mongodb:
          host: database-mongodb.database
          username: my-user
          password: MTIzNDU2
          authentication-database: admin
          database: datacenter_test
        elasticsearch:
          client:
            reactive:
              endpoints:
                - elasticsearch-master.default
      rabbitmq:
        addresses: rabbit-mq.default
        port: 5672
        username: datacenter-test
        password: datacenter-test
    logging:
      level:
        plus.datacenter.*: debug
---
# 创建 Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datacenter-service
  namespace: datacenter
  labels:
    app: datacenter-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: datacenter-service
  template:
    metadata:
      labels:
        app: datacenter-service
    spec:
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: aliyun-docker-secret
      containers:
        - name: datacenter-service
          image: ${SERVICE_IMAGE}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/liveness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 70
            periodSeconds: 70
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /actuator/health/readiness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
            - name: config
              mountPath: /application.yaml
              subPath: application.yaml
      initContainers:
        - name: init-elasticsearch
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', "until nc -z elasticsearch-master.default 9200; do echo waiting for elasticsearch; sleep 2; done"]
        - name: init-database
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', "until nc -z database-mongodb.database 27017; do echo waiting for mongodb; sleep 2; done"]
        - name: init-mq
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', "until nc -z rabbit-mq.default 5672; do echo waiting for rabbitmq; sleep 2; done"]
      volumes:
        - name: config
          configMap:
            name: datacenter-service-config
            items:
              - key: application.yaml
                path: application.yaml
---
# 创建服务
apiVersion: v1
kind: Service
metadata:
  name: datacenter-service
  namespace: datacenter
  labels:
    app: datacenter-service
spec:
  ports:
    - port: 80
      targetPort: 8080
      name: http
  selector:
    app: datacenter-service
  type: ClusterIP
---
# 创建 TLS
apiVersion: v1
kind: Secret
metadata:
  name: json-schema-cloud-tls
  namespace: datacenter
data:
  tls.crt: >-
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHRlRDQ0JQMmdBd0lCQWdJUUNuckNQUzl6L3l3OTR2a1ZSVkNBUXpBTkJna3Foa2lHOXcwQkFRc0ZBREJ5DQpNUXN3Q1FZRFZRUUdFd0pEVGpFbE1DTUdBMVVFQ2hNY1ZISjFjM1JCYzJsaElGUmxZMmh1YjJ4dloybGxjeXdnDQpTVzVqTGpFZE1Cc0dBMVVFQ3hNVVJHOXRZV2x1SUZaaGJHbGtZWFJsWkNCVFUwd3hIVEFiQmdOVkJBTVRGRlJ5DQpkWE4wUVhOcFlTQlVURk1nVWxOQklFTkJNQjRYRFRJeE1Ea3hOREF3TURBd01Gb1hEVEl5TURreE16SXpOVGsxDQpPVm93SURFZU1Cd0dBMVVFQXhNVllYQnBMbXB6YjI0dGMyTm9aVzFoTG1Oc2IzVmtNSUlCSWpBTkJna3Foa2lHDQo5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdDVxamhnYnRUUDIyQUNPa3ZSbVd5STRvOTRaL1ZsR1BkMGp4DQpHWkRDbVZXVHplZ0JVSy9zSlZ2STVYdlN2R0xPM21LcjcxMm9Ea3o0YmJBT3BuNGEzN2F3UllFY2MvbC9zMk9KDQo4NW9SdmRxK1JDbENuZ2g5bE4xU2VydHZVRm5LQ1kzTlh3U3dQSytDTGZuRE5TaStHWHlBTzgzRmtVSCtKQzhZDQpiWkM2cGtiTllzTUZKREdXRGRGTkNNTENxTTc1WHpmdkFzVWViNFhlM3dpYXVhU0M0N0drN0FJRlQ5RzVNb3ZMDQo3SWlZdldXaGdoSlJrWFAyaCs2Uk82SmdUdElyL3Q4bytrMWc3ZGNxMUI4VlpON281enFQZTF4NFhpRFUzd3UyDQpUMVR1Sm4zMDlxeGh3SWFUdW1BVUJ3TUtjQVc2VFJqeFY4UTI0MHYxUXNzRlM0NnZSd0lEQVFBQm80SUM5ekNDDQpBdk13SHdZRFZSMGpCQmd3Rm9BVWY5T1o4NkJIRGpFQVZsWWlqcmZNbnQzS0FZb3dIUVlEVlIwT0JCWUVGQnRtDQpoakgxQ3pxdUFhNDlxWEdJTVdra05DdFhNQ0FHQTFVZEVRUVpNQmVDRldGd2FTNXFjMjl1TFhOamFHVnRZUzVqDQpiRzkxWkRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGDQpCd01DTUQ0R0ExVWRJQVEzTURVd013WUdaNEVNQVFJQk1Da3dKd1lJS3dZQkJRVUhBZ0VXRzJoMGRIQTZMeTkzDQpkM2N1WkdsbmFXTmxjblF1WTI5dEwwTlFVekNCa2dZSUt3WUJCUVVIQVFFRWdZVXdnWUl3TkFZSUt3WUJCUVVIDQpNQUdHS0doMGRIQTZMeTl6ZEdGMGRYTmxMbVJwWjJsMFlXeGpaWEowZG1Gc2FXUmhkR2x2Ymk1amIyMHdTZ1lJDQpLd1lCQlFVSE1BS0dQbWgwZEhBNkx5OWpZV05sY25SekxtUnBaMmwwWVd4alpYSjBkbUZzYVdSaGRHbHZiaTVqDQpiMjB2VkhKMWMzUkJjMmxoVkV4VFVsTkJRMEV1WTNKME1Ba0dBMVVkRXdRQ01BQXdnZ0YrQmdvckJnRUVBZFo1DQpBZ1FDQklJQmJnU0NBV29CYUFCMUFDbDV2dkNlT1RraDhGWnpuMk9sZCtXK1YzMmNZQXI0K1UxZEpsd2xYY2VFDQpBQUFCZStRa3hyQUFBQVFEQUVZd1JBSWdNeUF2OE1NQWxSMG03bWE4S0E2OTNlbTRQam1jbFNMRGljQ0l6SVdCDQpHS0lDSUJGa0pmUHAwTHBxYjI1S2NTdVdKWUlrUTRsc0VtbnhmeWZpL3RVYVFlNTFBSFlBVWFPdzlmMEJlWnhXDQpiYmczZUk4TXBIck1HeWZMOTU2SVFwb04vdFNMQmVVQUFBRjc1Q1RIRUFBQUJBTUFSekJGQWlCVHRoUVpUT1YrDQpiSVl1YW1yVWdQbXJ5WVFtd09YSFA2Q2svVG5qVVdEUUxBSWhBTCtlbXk5YjZhekdhZUEwS2VHZGRrMUVaZWhTDQppaUYxZE5iVDQyK1JncHZXQUhjQVFjaktzZDhpUmtvUXhxRTZDVUtIWGs0eGl4c0Q2K3RMeDJqd2tHS1dCdllBDQpBQUY3NUNUR29nQUFCQU1BU0RCR0FpRUFxbGR0TmFENU5VSzk0bEczRzNydXZKWms3Nk41d2IybnBMbFhWVjJzDQo3bklDSVFDVU1pWEt2Z1RQQUpCMDhaVWlsOG80VnNtaEVQMy95YkRkb1UwUGR5cVZUVEFOQmdrcWhraUc5dzBCDQpBUXNGQUFPQ0FRRUFDbU5oTHN2Z0ZCREdpb2pPUVNpZldPMkRRUS9XNDIyQXVtbC9mcEVIb1ZuVTh0anNEci9UDQpOSU1oV3F3VmNnZDl6Q2g1QU9uYkd5dUpKdTM1UDFJait2bjBJMCttNmJTc0NVK291ZUhQc2FzcHZLRUdvTFRJDQp4c3Z5aCtHQk9mWEwyTnJaTGhnd2lnN2pQQWI3Yyt4UURHaDdPSVR5WVdXNUtIZXlVUGoyY2x5YWs0dFZrSTRCDQoyTEQ4Vk5VOHU4Yjg3NHcxaUlJOHlLbEt2SHp5dHZLQnNKRTlFdWRka1lSQ1UwREZiL2Q0UW8ySzdheEh4RytMDQpNVlJ3Y292U3ZsdysvQmdXNHNrRnRqSHB6enErVU1zbDY5WlE1VU8yditxdlhET2JHTmNEVjdaSzg2RUZSN3JBDQpKbmpvd1hlcXl0WDQzTjBjZk5hRjNIL1lmRmlCMzJ3a1NnPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRXJqQ0NBNWFnQXdJQkFnSVFCWUFtZndieWxWTTBqaHdZV2w3dUxqQU5CZ2txaGtpRzl3MEJBUXNGQURCaA0KTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMRXhCMw0KZDNjdVpHbG5hV05sY25RdVkyOXRNU0F3SGdZRFZRUURFeGRFYVdkcFEyVnlkQ0JIYkc5aVlXd2dVbTl2ZENCRA0KUVRBZUZ3MHhOekV5TURneE1qSTRNalphRncweU56RXlNRGd4TWpJNE1qWmFNSEl4Q3pBSkJnTlZCQVlUQWtOTw0KTVNVd0l3WURWUVFLRXh4VWNuVnpkRUZ6YVdFZ1ZHVmphRzV2Ykc5bmFXVnpMQ0JKYm1NdU1SMHdHd1lEVlFRTA0KRXhSRWIyMWhhVzRnVm1Gc2FXUmhkR1ZrSUZOVFRERWRNQnNHQTFVRUF4TVVWSEoxYzNSQmMybGhJRlJNVXlCUw0KVTBFZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZ1dhOVgrcGgrd0FtOA0KWWgxRmsxTWpLYlE1UXdCT09LVmFaUi9PZkNoK0Y2ZjkzdTd2WkhHY1VVL2x2VkdnVVFuYnpKaFIxVVYyZXBKYQ0KZSttN2N4blhJS2REMC9WUzlidEFnd0pzekdGdndvcVhlYUNxRm9QNzF3UG1YampVd0xUNzArcXZYNGhkeVlmTw0KSmNqZVR6NVFLdGc4elF3eGFLOXg0SlQ5Q29PbW9WZFZoRUJBaUQzRHdSNWZGZ09IRHd3R3hkSldWQnZrdG5vQQ0KempkVExYRGRiU1ZDNWpaMHU4b3E5QmlURHY3akFsc0I1RjhhWmd2U1pET1FlRnJ3YU9UYktXU0VJbkVobmNoSw0KWlREMWR6NmFCbGsxeEdFSTVQWldBblZBYmEvb2ZIMzNrdHltYVREc0U2eFJEblc5N3BEa2ltQ1JhazZDRWJmZQ0KM2RYdzZPVjVBZ01CQUFHamdnRlBNSUlCU3pBZEJnTlZIUTRFRmdRVWY5T1o4NkJIRGpFQVZsWWlqcmZNbnQzSw0KQVlvd0h3WURWUjBqQkJnd0ZvQVVBOTVRTlZiUlRMdG04S1BpR3h2RGw3STkwVlV3RGdZRFZSMFBBUUgvQkFRRA0KQWdHR01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFTQmdOVkhSTUJBZjhFQ0RBRw0KQVFIL0FnRUFNRFFHQ0NzR0FRVUZCd0VCQkNnd0pqQWtCZ2dyQmdFRkJRY3dBWVlZYUhSMGNEb3ZMMjlqYzNBdQ0KWkdsbmFXTmxjblF1WTI5dE1FSUdBMVVkSHdRN01Ea3dONkExb0RPR01XaDBkSEE2THk5amNtd3pMbVJwWjJsag0KWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JEUVM1amNtd3dUQVlEVlIwZ0JFVXdRekEzQmdsZw0KaGtnQmh2MXNBUUl3S2pBb0JnZ3JCZ0VGQlFjQ0FSWWNhSFIwY0hNNkx5OTNkM2N1WkdsbmFXTmxjblF1WTI5dA0KTDBOUVV6QUlCZ1puZ1F3QkFnRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSzNkVk9qNWRsdjRNeksyaTIzMw0KbERZdnlKM3NsRlkyWDJIS1RZR3RlOG5iSzZpNS9mc0RJbU1ZaWhBa3A2VmFOWS9lbjhXWjVxY3JRUFZMdUpySg0KRFNYVDA0Tm5NZVpPUURVb2ovTkhBbWRmQ0JCL2gxYlo1T0dLNlNmMWg1WXgvNXdSNGYzVFVvUGdHbG5VN0V1UA0KSVNMTmRNUmlEclhudGNJbURBaVJ2a2g1R0p1SDRZQ1ZFNlhFbnRxYU5JZ0drUnd4S1NnblUzSWQzaXVGYlc5Rg0KVVE5UXF0YjFHWDkxQUo3aTQxNTNUaWtHZ1lDZHdZa0JVUkQ4Z1NWZThPQWNvNklmWk9ZdC9URXdpaTFJdmkxQw0KcW51VWxXcHNGMUxkUU5JZGZiVzNUU2UwQmhRYTdpZmJWSWZ2UFdIWU91M3JrZzFaZU1vNlhSVTlCNG41VnlKWQ0KUm1FPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0K
  tls.key: >-
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdDVxamhnYnRUUDIyQUNPa3ZSbVd5STRvOTRaL1ZsR1BkMGp4R1pEQ21WV1R6ZWdCClVLL3NKVnZJNVh2U3ZHTE8zbUtyNzEyb0RrejRiYkFPcG40YTM3YXdSWUVjYy9sL3MyT0o4NW9SdmRxK1JDbEMKbmdoOWxOMVNlcnR2VUZuS0NZM05Yd1N3UEsrQ0xmbkROU2krR1h5QU84M0ZrVUgrSkM4WWJaQzZwa2JOWXNNRgpKREdXRGRGTkNNTENxTTc1WHpmdkFzVWViNFhlM3dpYXVhU0M0N0drN0FJRlQ5RzVNb3ZMN0lpWXZXV2hnaEpSCmtYUDJoKzZSTzZKZ1R0SXIvdDhvK2sxZzdkY3ExQjhWWk43bzV6cVBlMXg0WGlEVTN3dTJUMVR1Sm4zMDlxeGgKd0lhVHVtQVVCd01LY0FXNlRSanhWOFEyNDB2MVFzc0ZTNDZ2UndJREFRQUJBb0lCQUN1aGpmYU5zdHEyK0FjMApjVE9XM3lRdDFFSnVMZGgvYlU1MWdRWUlScFpWcGRncXFCVmFtUTJQc0VBSW10MjF4VjlIcDRBc2k0RktmVWJqCnJiZVhCQi9odENYd05xakF3NzRIaTRMZVBCVVg1RnNpU3ZodklCaStONWwrN1ViMDczUXh4SG91RFF0KzBickgKUGNKbU9qYW9SWGp3djJCemhFZHBBYThYMDZNcmpPUlc0dEF5SEM2OU9lUldUZjUwMHd3ZlZZL1ZZOXM4Y2dvKwptQ1ZFY2NpbzNFM3F3cGlvT1VCR21TQXpRRW5EVlJpR1VYZEJUN205ZWVpSkpHdCtsam45MWVVUnhZMU45Y0V4CjFmc1lRMi9Ibm1Ma2s2cEVtTWd3RmY0ay9CSUEyd2R6Mjd2SFdyOWZUd3pCdCtwN2JHY0hlbDVBa0VxYWhWbksKMTBUUFVhRUNnWUVBNTNJUlk3MUxQUVJ6S05EYmNDYklIcTlCRGM1aGRZSXBFSlBza1RsM1NMcnRRaytqS2hkMQpIdFhPU1pXUHBDK3MxcjRTMmVtQ1Z0SEVMTGFOQW11ZFhzbUVTRjhBMi95aXRRMThrM20zM05DbVI3Sm44NTY0CkNnUmtFaXMwa1JKbkVwZExPUkZEaEJVNW1jeGR6ekF5c0FOMEtHalhTeGRXcTdSQWVvaE9MQWtDZ1lFQXl4VTQKMCtGeG1mT01XcEdFdVV2bWk4VmtqcEhlK3ZEWG84NmlHS0FubHBZaDl5RHdhM1FsLzZTVFJqS2JMOWdQSkRCVQo2UlUxWllteXpFNlhnUjZRQUpWQVVPVFFSZmZpK2tiOG1YRWw5QjhUbW81OHJjdUpPUnJoQVcvOGp4REpZVlQ1CjhaL2J3aHo2MkZFdmJaeHBmdlJtWmNEQTA0eGxseEpWeXVoOWRNOENnWUJpQmtqaE1uSWtWTGNsaVZmM1p5V0oKQVhjUER1THVMd09QZHVkU0ZzR3p0eC8zM3R6ZlhmSUg3a3dobEV1eklWSVYzWWtFYkViODJIazY2dEpNUFNINAozR2EvZENWY0J1TXV4WmlHcVoyNjAxQXB1NkVWYUpyUCswNGE5OXVhdWUyWHpTWlo5RHJoUFZBWkdKcCt2dzRvCnlEMnhRNzR6bXAzbHVVRTU1SE1mYVFLQmdGcWVzYWo2WkhMS0Zzc2pQQkpqS0JFZWwreDJjd1dQQ3VweGZpdDIKNjdOcWN1V1BzVGlCcjZNUGtSZzE1TUhJcTVqK2FDVko3WFhOcUJjNnlxZzNOeExMaHRPU0JzM3grenFyQ25SOQo1TzIySUUxTFg1ODl2NUhYeUtlWGpSOVo0a0tvWkkvSlFZcXcyODVEQytMaGRNSE4xUk42bTVES2lWcU1OL1EvCkloeEpBb0dCQUpKZ3pYWVhQY243Yi9reWF1ejRBWkl0VXJTOUtLVzBmc3pCbWVNaGJGbE02WUV3ZUVYRWdRcTEKbHc3YThXS3ZkMWt6VTFFNmtkc0lZL3JqQ2IyNmtlRzlldHhHOUdIZFZzdWkyWTUvM0k0dEY2OU1QTXlBYkdMaAoxNHBteWhmT09lRzRZNmF2aWJZSmtPRUo5RGxvYmZQQ25PNjVrSTljZ0t2R3EzRmptWmRkCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
type: kubernetes.io/tls
---
# 创建 Ingress
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: datacenter-service
  namespace: datacenter
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - api.json-schema.cloud
      secretName: json-schema-cloud-tls
  rules:
    - host: api.json-schema.cloud
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              serviceName: datacenter-service
              servicePort: 80
    - host: api.datacenter.wgv
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              serviceName: datacenter-service
              servicePort: 80